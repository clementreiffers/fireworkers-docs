"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[383],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,h=p["".concat(s,".").concat(d)]||p[d]||k[d]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2},a="Architecture",l={unversionedId:"the-architecture",id:"the-architecture",title:"Architecture",description:"This step will explain how to set up the entire architecture, including the necessary secrets,",source:"@site/docs/the-architecture.md",sourceDirName:".",slug:"/the-architecture",permalink:"/octo-workers-docs/docs/the-architecture",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/octo-workers-docs/docs/intro"},next:{title:"Required Tools",permalink:"/octo-workers-docs/docs/tools-needed"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Setup secrets",id:"setup-secrets",level:3},{value:"Image Registry Secrets",id:"image-registry-secrets",level:4},{value:"S3 Secret",id:"s3-secret",level:4},{value:"Credentials",id:"credentials",level:5},{value:"Config",id:"config",level:5},{value:"Setup the Architecture",id:"setup-the-architecture",level:3},{value:"Install FakeCfApi",id:"install-fakecfapi",level:3},{value:"Usage",id:"usage",level:2},{value:"How it works",id:"how-it-works",level:2}],u={toc:c},p="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"This step will explain how to set up the entire architecture, including the necessary ",(0,o.kt)("a",{parentName:"p",href:"#setup-secrets"},"secrets"),",\nall ",(0,o.kt)("a",{parentName:"p",href:"#setup-the-architecture"},"Kubernetes Operators"),", and the ",(0,o.kt)("a",{parentName:"p",href:"#install-fakecfapi"},"fake-cf-api"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("h3",{id:"setup-secrets"},"Setup secrets"),(0,o.kt)("p",null,"The architecture requires access to both an Image Registry and an S3 Bucket, so let's configure them!"),(0,o.kt)("h4",{id:"image-registry-secrets"},"Image Registry Secrets"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This architecture currently exclusively supports Docker Hub as the Image registry.")),(0,o.kt)("p",null,"create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"config-docker-hub.json")," and write inside of it :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "auths": {\n    "https://index.docker.io/v1/": {\n        "username":"YOUR_USERNAME",\n        "password":"YOUR_PASSWORD"\n      }\n  }\n}\n')),(0,o.kt)("p",null,"Then you can execute this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat config-docker-hub.json | base64\n")),(0,o.kt)("p",null,"The following command line will create an encoded string that contains all credentials for Docker Hub accounts. Please\ncopy and paste this encoded string into a new document named ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-hub-secret.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  .dockerconfigjson: ENCODED_STRING_HERE\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: docker-hub\ntype: kubernetes.io/dockerconfigjson\n")),(0,o.kt)("p",null,"and now you can apply this resource by running ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f docker-hub-secret.yaml")),(0,o.kt)("h4",{id:"s3-secret"},"S3 Secret"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The testing of an S3 Bucket was exclusively performed on Scaleway.")),(0,o.kt)("p",null,"You need to create a S3 on the Cloud provider of your choice, and follow all steps below.\nAll steps shows how yo do setup AWS config using scaleway for example."),(0,o.kt)("p",null,"Once created, you can follow ",(0,o.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/"},"this tuto"),"\nto login to Scaleway S3 using the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-cli")),(0,o.kt)("h5",{id:"credentials"},"Credentials"),(0,o.kt)("p",null,"To create a secret ",(0,o.kt)("inlineCode",{parentName:"p"},"s3-credentials"),", run this command: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl create secret generic --from-file=~/.aws/credentials s3-credentials\n")),(0,o.kt)("h5",{id:"config"},"Config"),(0,o.kt)("p",null,"create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"configmap-aws.yaml")," and write inside:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-config\ndata:\n  config: |\n    [default]\n    region = fr-par\n    s3 =\n      endpoint_url = https://s3.fr-par.scw.cloud\n      signature_version = s3v4\n      max_concurrent_requests = 100\n      max_queue_size = 1000\n      multipart_threshold = 50 MB\n      multipart_chunksize = 10 MB\n    s3api =\n      endpoint_url = https://s3.fr-par.scw.cloud\n")),(0,o.kt)("p",null,"take care to configure the aws-config correctly following ",(0,o.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/"},"this tuto"),"."),(0,o.kt)("p",null,"and now you can apply it by running: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f configmap-aws.yaml")),(0,o.kt)("h3",{id:"setup-the-architecture"},"Setup the Architecture"),(0,o.kt)("p",null,"The entire project runs on Kubernetes, so you need to install all the necessary components before using it."),(0,o.kt)("p",null,"First, clone this GitHub repository: ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/clementreiffers/CfKubernetesArch.git")),(0,o.kt)("p",null,"Next, execute the following commands: ",(0,o.kt)("inlineCode",{parentName:"p"},"cd CfKubernetesArch && make deploy")),(0,o.kt)("p",null,"This will create all the required resources for using this architecture."),(0,o.kt)("h3",{id:"install-fakecfapi"},"Install FakeCfApi"),(0,o.kt)("p",null,"The FakeCfApi is essential if you want to use the Wrangler CLI within this architecture."),(0,o.kt)("p",null,"Run: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f https://raw.githubusercontent.com/clementreiffers/fake-cf-api/main/kubernetes/fake-cf-api.yaml")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"You need to Login before create your very first Octo Worker, to do so, go to ",(0,o.kt)("a",{parentName:"p",href:"#/docs/tools-needed#wrangler-cli"},"the Wrangler CLI login"),"\nand come back here."),(0,o.kt)("p",null,"you need a file that you can curl here : ",(0,o.kt)("inlineCode",{parentName:"p"},"curl -O -L https://raw.githubusercontent.com/clementreiffers/cf-workers-kubernetes-arch/main/config/samples/api_v1_workeraccount.yaml")),(0,o.kt)("p",null,"Once downloaded, modify it to set the account ID you got when you were logging to\n",(0,o.kt)("a",{parentName:"p",href:"#/docs/tools-needed#wrangler-cli"},"cloudflare using wrangler CLI"),"."),(0,o.kt)("p",null,"you can now run: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f api_v1_workeraccount.yaml")," and that's all!"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"you can change the ",(0,o.kt)("inlineCode",{parentName:"p"},"workerBundleName")," and the WorkerAccount's ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," as you want!")),(0,o.kt)("h2",{id:"how-it-works"},"How it works"),(0,o.kt)("p",null,"The entire architecture works with Kubernetes Operators.\nThey will operate following this graph:"),(0,o.kt)("mermaid",{value:"flowchart TB\n    subgraph Cloud\n        FakeCfApi --\x3e BucketS3[(Bucket S3)]\n        BucketS3 --\x3e JobBuilder\n        JobBuilder --\x3e Registry\n        Registry --\x3e Deployment\n        subgraph Kubernetes\n            FakeCfApi --\x3e WorkerVersion\n            WorkerVersion --\x3e WorkerRelease\n            WorkerRelease --\x3e JobBuilder\n            WorkerAccount --\x3e WorkerBundle\n            WorkerBundle --\x3e Deployment\n            JobBuilder --\x3e WorkerBundle\n        end\n    end\n    admin --\x3e |Manage Deployment| FakeCfApi\n    client --\x3e |HTTP| Deployment\n    \n    \n    style FakeCfApi fill:#002654,color:white,stroke:white\n    style WorkerVersion fill:#002654,color:white,stroke:white\n    style WorkerRelease fill:#002654,color:white,stroke:white\n    style WorkerAccount fill:#002654,color:white,stroke:white\n    style WorkerBundle fill:#002654,color:white,stroke:white\n    style JobBuilder fill:#002654,color:white,stroke:white\n    style Deployment fill:#002654,color:white,stroke:white\n    style Kubernetes fill:#59C3D5,color:black,stroke:white\n    style Cloud fill:#D9F1F5,color:black,stroke:white\n    style BucketS3 fill:orange,color:black,stroke:white\n    style Registry fill:#2596EC,color:white,stroke:white\n    style admin fill:#2596EC,color:white,stroke:white\n    style client fill:#2596EC,color:white,stroke:white\n\n    linkStyle 0 stroke:white,stroke-width:3\n    linkStyle 1 stroke:white,stroke-width:3\n    linkStyle 2 stroke:white,stroke-width:3\n    linkStyle 3 stroke:white,stroke-width:3\n    linkStyle 4 stroke:white,stroke-width:3\n    linkStyle 5 stroke:white,stroke-width:3\n    linkStyle 6 stroke:white,stroke-width:3\n    linkStyle 7 stroke:white,stroke-width:3\n    linkStyle 8 stroke:white,stroke-width:3\n    linkStyle 9 stroke:white,stroke-width:3\n    linkStyle 10 stroke:black,stroke-width:3\n    linkStyle 11 stroke:black,stroke-width:3"}))}k.isMDXComponent=!0}}]);