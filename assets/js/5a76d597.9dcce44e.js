"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[383],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,k=p["".concat(s,".").concat(d)]||p[d]||h[d]||i;return r?n.createElement(k,l(l({ref:t},u),{},{components:r})):n.createElement(k,l({ref:t},u))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5379:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:2},l="Architecture",a={unversionedId:"the-architecture",id:"the-architecture",title:"Architecture",description:"This step will explain how to set up the entire architecture, including the necessary secrets,",source:"@site/docs/the-architecture.md",sourceDirName:".",slug:"/the-architecture",permalink:"/octo-workers-docs/docs/the-architecture",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/octo-workers-docs/docs/intro"},next:{title:"Required Tools",permalink:"/octo-workers-docs/docs/tools-needed"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Setup secrets",id:"setup-secrets",level:3},{value:"Image Registry Secrets",id:"image-registry-secrets",level:4},{value:"S3 Secret",id:"s3-secret",level:4},{value:"Credentials",id:"credentials",level:5},{value:"Config",id:"config",level:5},{value:"Setup the Architecture",id:"setup-the-architecture",level:3},{value:"Install FakeCfApi",id:"install-fakecfapi",level:3},{value:"Usage",id:"usage",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"What do we need",id:"what-do-we-need",level:3},{value:"Simplified Architecture",id:"simplified-architecture",level:3},{value:"Complete Architecture",id:"complete-architecture",level:3},{value:"WorkerAccount",id:"workeraccount",level:4},{value:"FakeCfApi",id:"fakecfapi",level:4},{value:"WorkerVersion",id:"workerversion",level:4},{value:"WorkerRelease",id:"workerrelease",level:4},{value:"JobBuilder",id:"jobbuilder",level:4},{value:"WorkerBundle",id:"workerbundle",level:4}],u={toc:c},p="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"This step will explain how to set up the entire architecture, including the necessary ",(0,o.kt)("a",{parentName:"p",href:"#setup-secrets"},"secrets"),",\nall ",(0,o.kt)("a",{parentName:"p",href:"#setup-the-architecture"},"Kubernetes Operators"),", and the ",(0,o.kt)("a",{parentName:"p",href:"#install-fakecfapi"},"fake-cf-api"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("h3",{id:"setup-secrets"},"Setup secrets"),(0,o.kt)("p",null,"The architecture requires access to both an Image Registry and an S3 Bucket, so let's configure them!"),(0,o.kt)("h4",{id:"image-registry-secrets"},"Image Registry Secrets"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This architecture currently exclusively supports Docker Hub as the Image registry.")),(0,o.kt)("p",null,"create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"config-docker-hub.json")," and write inside of it :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "auths": {\n    "https://index.docker.io/v1/": {\n        "username":"YOUR_USERNAME",\n        "password":"YOUR_PASSWORD"\n      }\n  }\n}\n')),(0,o.kt)("p",null,"Then you can execute this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat config-docker-hub.json | base64\n")),(0,o.kt)("p",null,"The following command line will create an encoded string that contains all credentials for Docker Hub accounts. Please\ncopy and paste this encoded string into a new document named ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-hub-secret.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  .dockerconfigjson: ENCODED_STRING_HERE\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: docker-hub\ntype: kubernetes.io/dockerconfigjson\n")),(0,o.kt)("p",null,"and now you can apply this resource by running ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f docker-hub-secret.yaml")),(0,o.kt)("h4",{id:"s3-secret"},"S3 Secret"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The testing of an S3 Bucket was exclusively performed on Scaleway.")),(0,o.kt)("p",null,"You need to create a S3 on the Cloud provider of your choice, and follow all steps below.\nAll steps shows how yo do setup AWS config using scaleway for example."),(0,o.kt)("p",null,"Once created, you can follow ",(0,o.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/"},"this tuto"),"\nto login to Scaleway S3 using the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-cli")),(0,o.kt)("h5",{id:"credentials"},"Credentials"),(0,o.kt)("p",null,"To create a secret ",(0,o.kt)("inlineCode",{parentName:"p"},"s3-credentials"),", run this command: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl create secret generic --from-file=~/.aws/credentials s3-credentials\n")),(0,o.kt)("h5",{id:"config"},"Config"),(0,o.kt)("p",null,"create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"configmap-aws.yaml")," and write inside:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-config\ndata:\n  config: |\n    [default]\n    region = fr-par\n    s3 =\n      endpoint_url = https://s3.fr-par.scw.cloud\n      signature_version = s3v4\n      max_concurrent_requests = 100\n      max_queue_size = 1000\n      multipart_threshold = 50 MB\n      multipart_chunksize = 10 MB\n    s3api =\n      endpoint_url = https://s3.fr-par.scw.cloud\n")),(0,o.kt)("p",null,"take care to configure the aws-config correctly following ",(0,o.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/"},"this tuto"),"."),(0,o.kt)("p",null,"and now you can apply it by running: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f configmap-aws.yaml")),(0,o.kt)("h3",{id:"setup-the-architecture"},"Setup the Architecture"),(0,o.kt)("p",null,"The entire project runs on Kubernetes, so you need to install all the necessary components before using it."),(0,o.kt)("p",null,"First, clone this GitHub repository: ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/clementreiffers/CfKubernetesArch.git")),(0,o.kt)("p",null,"Next, execute the following commands: ",(0,o.kt)("inlineCode",{parentName:"p"},"cd CfKubernetesArch && make deploy")),(0,o.kt)("p",null,"This will create all the required resources for using this architecture."),(0,o.kt)("h3",{id:"install-fakecfapi"},"Install FakeCfApi"),(0,o.kt)("p",null,"The FakeCfApi is essential if you want to use the Wrangler CLI within this architecture."),(0,o.kt)("p",null,"Run: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f https://raw.githubusercontent.com/clementreiffers/fake-cf-api/main/kubernetes/fake-cf-api.yaml")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"You need to Login before create your very first Octo Worker, to do so, go to ",(0,o.kt)("a",{parentName:"p",href:"#/docs/tools-needed#wrangler-cli"},"the Wrangler CLI login"),"\nand come back here."),(0,o.kt)("p",null,"you need a file that you can curl here : ",(0,o.kt)("inlineCode",{parentName:"p"},"curl -O -L https://raw.githubusercontent.com/clementreiffers/cf-workers-kubernetes-arch/main/config/samples/api_v1_workeraccount.yaml")),(0,o.kt)("p",null,"Once downloaded, modify it to set the account ID you got when you were logging to\n",(0,o.kt)("a",{parentName:"p",href:"#/docs/tools-needed#wrangler-cli"},"cloudflare using wrangler CLI"),"."),(0,o.kt)("p",null,"you can now run: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f api_v1_workeraccount.yaml")," and that's all!"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"you can change the ",(0,o.kt)("inlineCode",{parentName:"p"},"workerBundleName")," and the WorkerAccount's ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," as you want!")),(0,o.kt)("h2",{id:"how-it-works"},"How it works"),(0,o.kt)("p",null,"The entire architecture works with Kubernetes Operators.\nThey will operate following these graphs belows:"),(0,o.kt)("h3",{id:"what-do-we-need"},"What do we need"),(0,o.kt)("p",null,"This graph defines our requirements as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"It is crucial to use the same tools as Cloudflare for a fully manageable architecture, achieved through the use of the\nWranglerCLI."),(0,o.kt)("li",{parentName:"ol"},"The entire deployment process must be fully automated in the cloud. Therefore, we require the implementation of CI/CD\nto manage code deployment, leading to the creation of a deployment at the end."),(0,o.kt)("li",{parentName:"ol"},"We seek a comprehensive architecture that is compatible with CDN.")),(0,o.kt)("mermaid",{value:"flowchart TB\n    subgraph Cloud\n        style Cloud fill:#D9F1F5,color:black,stroke:white\n        Reception--\x3e Archive --\x3e Compilation --\x3e Deployment\n    end\n    admin --\x3e WranglerCLI --\x3e Cloud --\x3e client\n\n    style admin fill:#2596EC,color:white,stroke:white\n    style WranglerCLI fill:#2596EC,color:white,stroke:white\n    style client fill:#2596EC,color:white,stroke:white\n    style Reception fill:#59C3D5,color:white,stroke:white\n    style Archive fill:#59C3D5,color:white,stroke:white\n    style Compilation fill:#59C3D5,color:white,stroke:white\n    style Deployment fill:#59C3D5,color:white,stroke:white"}),(0,o.kt)("h3",{id:"simplified-architecture"},"Simplified Architecture"),(0,o.kt)("p",null,"To meet our requirements, we employ a Kubernetes Cluster with our custom Kubernetes Operators. These Kubernetes\nOperators handle the entire CI/CD process for deploying customer code.\nSome versions, such as KubeEdge, are compatible with CDN, making them a suitable solution that aligns with our needs."),(0,o.kt)("mermaid",{value:"flowchart TB\n    admin --\x3e |use| WranglerCLI --\x3e Kubernetes\n    client --\x3e |HTTP| Deployment\n    subgraph Cloud\n        Archive\n        Reception --\x3e |upload code| Archive --\x3e |download code| Compilation\n        subgraph Kubernetes\n            Reception --\x3e |create| Compilation --\x3e |create or update| Deployment\n        end\n    end\n    \n    style Cloud fill:#D9F1F5,color:black,stroke:white\n    style Kubernetes fill:#80D1DE,color:white,stroke:white\n    style Archive fill:#80D1DE,color:white,stroke:white\n    style admin fill:#2596EC,color:white,stroke:white\n    style client fill:#2596EC,color:white,stroke:white\n    style WranglerCLI fill:#2596EC,color:white,stroke:white\n    style Reception fill:#59C3D5,color:white,stroke:white\n    style Compilation fill:#59C3D5,color:white,stroke:white\n    style Deployment fill:#59C3D5,color:white,stroke:white"}),(0,o.kt)("h3",{id:"complete-architecture"},"Complete Architecture"),(0,o.kt)("p",null,"This comprehensive architecture encompasses various Kubernetes Operators, each of which is described below:"),(0,o.kt)("h4",{id:"workeraccount"},"WorkerAccount"),(0,o.kt)("p",null,"The WorkerAccount serves as the initial resource that an administrator must create. It provides a reference to identify\nthe corresponding Deployment linked to this account."),(0,o.kt)("h4",{id:"fakecfapi"},"FakeCfApi"),(0,o.kt)("p",null,"The FakeCfApi receives codes sent by an admin and pushes them into an S3 Bucket. Subsequently, it creates a CRD\n(Custom Resource Definition) called WorkerVersion, containing the project name and the S3 link."),(0,o.kt)("h4",{id:"workerversion"},"WorkerVersion"),(0,o.kt)("p",null,"The WorkerVersion consolidates the project name from the admin and stores the link to the S3 Bucket where the code is\nretained. Its design facilitates future updates and allows for rollbacks, if necessary."),(0,o.kt)("h4",{id:"workerrelease"},"WorkerRelease"),(0,o.kt)("p",null,"The WorkerRelease aggregates multiple WorkerVersions. Once it is created or updated, it triggers a JobBuilder to prepare\na new deployment."),(0,o.kt)("h4",{id:"jobbuilder"},"JobBuilder"),(0,o.kt)("p",null,"The JobBuilder is created by the WorkerRelease. Once initiated, it generates a job utilizing Kaniko to construct a new\ncontainer for the subsequent deployment. After completion, it updates a WorkerBundle."),(0,o.kt)("h4",{id:"workerbundle"},"WorkerBundle"),(0,o.kt)("p",null,"The WorkerBundle facilitates the complete deployment (including Deployment, Ingress, Service, HPA) of the project when\nupdated by the JobBuilder. It is initially created by the WorkerAccount."),(0,o.kt)("mermaid",{value:"flowchart TB\n    subgraph Cloud\n        subgraph Archive\n            style Archive fill:#80D1DE,color:black,stroke:white\n            BucketS3 & Registry\n        end\n        subgraph Kubernetes\n            \n            FakeCfApi --\x3e |create| WorkerVersion\n            JobBuilder --\x3e |update| WorkerBundle\n            WorkerAccount --\x3e |create| WorkerBundle\n            subgraph Reception\n                FakeCfApi & WorkerAccount\n                FakeCfApi --\x3e |push code| BucketS3[(S3 Bucket)]\n            end\n            subgraph Compilation\n                WorkerVersion --\x3e |create or update|WorkerRelease\n                WorkerRelease --\x3e |create| JobBuilder\n                BucketS3 --\x3e |download code| JobBuilder\n                JobBuilder --\x3e |push image| Registry\n            end\n            subgraph Deployment\n                Registry --\x3e |pull image| ClientApp\n                WorkerBundle --\x3e |create or update| ClientApp\n            end\n        end\n    end\n    admin --\x3e |Manage Deployment| WranglerCLI --\x3e FakeCfApi\n    admin --\x3e |create Account| WorkerAccount\n    client --\x3e |HTTP| ClientApp\n    \n    style FakeCfApi fill:#002654,color:white,stroke:white\n    style WorkerVersion fill:#002654,color:white,stroke:white\n    style WorkerRelease fill:#002654,color:white,stroke:white\n    style WorkerAccount fill:#002654,color:white,stroke:white\n    style WorkerBundle fill:#002654,color:white,stroke:white\n    style JobBuilder fill:#002654,color:white,stroke:white\n    style ClientApp fill:#002654,color:white,stroke:white\n    style Kubernetes fill:#80D1DE,color:black,stroke:white\n    style Archive fill:#80D1DE,color:black,stroke:white\n    style Cloud fill:#D9F1F5,color:black,stroke:white\n    style BucketS3 fill:orange,color:black,stroke:white\n    style Registry fill:#2596EC,color:white,stroke:white\n    style admin fill:#2596EC,color:white,stroke:white\n    style client fill:#2596EC,color:white,stroke:white\n    style WranglerCLI fill:#2596EC,color:white,stroke:white\n    style Reception fill:#59C3D5,color:white,stroke:white\n    style Compilation fill:#59C3D5,color:white,stroke:white\n    style Deployment fill:#59C3D5,color:white,stroke:white\n\n    linkStyle 0 stroke:white,stroke-width:3\n    linkStyle 1 stroke:white,stroke-width:3\n    linkStyle 2 stroke:white,stroke-width:3\n    linkStyle 3 stroke:white,stroke-width:3\n    linkStyle 4 stroke:white,stroke-width:3\n    linkStyle 5 stroke:white,stroke-width:3\n    linkStyle 6 stroke:white,stroke-width:3\n    linkStyle 7 stroke:white,stroke-width:3\n    linkStyle 8 stroke:white,stroke-width:3\n    linkStyle 9 stroke:white,stroke-width:3\n    linkStyle 10 stroke:black,stroke-width:3\n    linkStyle 11 stroke:black,stroke-width:3\n    linkStyle 12 stroke:black,stroke-width:3"}))}h.isMDXComponent=!0}}]);